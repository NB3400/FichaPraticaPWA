1 - O que são operações de “Commit”, “Push” e “Pop” efetuadas num repositório?
A operação "Commit" é responsável por guardar as alterações feitas localmente no repositório do computador. 
Ao realizar um commit, cria-se um registo do projeto, contendo as modificações feitas até ao momento do commit.
É uma boa prática escrever uma mensagem que explique o que foi alterado.
O "Push" serve para enviar esses commits que estão no repositório local para o repositório remoto, como o GitHub. 
Essa operação torna as alterações disponíveis para todos os membros da equipa e cria um backup online do trabalho.
O "Pop" serve para guardar temporariamente mudanças que ainda não se quer fazer commit. Com o git stash, essas mudanças são guardadas numa área temporária. 
Depois, com git stash pop, essas alterações são recuperadas para continuar o trabalho, ao mesmo tempo que remove essas mudanças do stash.

2 – Quais sáo as vantagens de usar Branchs num repositório git?
Os branches são fundamentais em qualquer repositório GIT, principalmente se for colaborativo, pois evitam que alterações não testadas afetem código estável, 
vários elementos da mesma equipa podem criar ramificações e testar soluções diferentes ao mesmo tempo e ajuda a gerir versões do produto. 

3 – Nos Merges de conteúdos resultantes de um “Pop” podem resultar em conflitos. Em
que consistem e como podem ser resolvidos esses conflitos?
Ao executar um "git stash pop", o Git tenta aplicar as mudanças temporariamente guardadas (stash) no diretório de trabalho atual. 
No entanto, se houver outras modificações feitas desde que o stash foi criado, essas mudanças podem entrar em conflito com as novas alterações. 
Esses conflitos de merge acontecem quando o Git não consegue decidir automaticamente qual versão deve prevalecer.
Para resolver este problema, deve-se abrir os arquivos que apresentam conflitos, revê-los e escolher que alterações manter/combinar. 
Depois de resolver os conflitos, usar o "git add" e fazer um commit para registar a resolução das divergências. 

4 – “Clone” e “Fork” são formas diferentes de replicar um repositório Git. Quais as diferenças entre eles?
Fazer o "Clone" um repositório significa criar uma cópia local do projeto existente no seu computador. Essa cópia está diretamente vinculada ao repositório original, permitindo que receba atualizações (com "pull") do original e envie as alterações (com "push") para o mesmo. 
É o método mais indicado para quem trabalha dentro de uma equipa de desenvolvimento e contribui diretamente para o projeto principal.
O "Fork" cria uma cópia independente do repositório original no servidor de hospedagem (como o GitHub) na sua própria conta. Esse fork é um repositório diferente, onde há controlo total para desenvolver de forma isolada, sem afetar o projeto original. 
O fork é especialmente útil em projetos open source, onde não se tem direito de escrita no repositório principal, e se deseja contribuir mantendo o controlo da sua versão até aprovação.
Em resumo, "clone" cria uma cópia ligada ao original para colaboração direta, enquanto o "fork" cria uma cópia independente para desenvolvimento paralelo e contribuições apenas por pull requests.